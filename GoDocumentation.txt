








Project Go in Haskell
Program Design and Data Structures (1DL201) 2015/2016

By group 40:
Marie Paulsson, Eda Kurdoglu and Joel Ramstedt
















































Introduction
Go is a 2500 year old board game originated from ancient China that 
is currently being played around the world, mostly in East Asia. 
It is an abstract strategy game where strategy, tactics and 
observations are required. There are two players who alternately 
place black and white stones on an unoccupied intersection (”point”) 
of a board with a 19x19 grid of lines. Players who are beginners or 
less experienced often play on smaller 9x9 and 13x13 boards. The stones 
can not be moved once placed but can be removed if captured. A stone 
or a group of stones are captured when they are surrounded by the 
opponent's stones, when there are no neighboring points (”liberties”)
left. The goal is to have surrounded a larger total area of the board
than the opponent with one's stone by the end of the game. (https://en.wikipedia.org/wiki/Go_%28game%29 28/2-16 03:05)

Att nämna:
computer go <- ganska relevant och nytt
Vad som intresserade en etc.




Regler att kanske nämna (som kanske skulle vara för svåra att koda):
under the stones (ishi no shiita)
eyes
ko
territorier
komi
seki
självmord
handikapp


Documentation

You must write documentation for your program. In addition to the standard specifications for each function and data type to be included in the source code, you must write a separate document that describes how your program works and how to use it. This document must include :

- The project title, the names of all group members, and a statement of the fact that this is the project for this course this year.
- A table of contents, an introduction, and summary of what the program does.
- Use cases: a guide for how to actually use your program, including key examples.
- Program documentation: a description of how your program really works, including at least:
       - Description of data structures. For abstract data types, you should also describe the interface.
       - Description of the algorithms your program uses.
       - Description of the various functions of the program. Describe algorithms and provide functional specifications for the main elements. Describe the control flow (i.e., how functions call each other).
- Description of known shortcomings of the program. There may be things that work but not as well as you would like, or things that despite valiant attempts you have not succeeded in implementing properly.

It should be sufficient to read the documentation to understand your program!

Documentation is as important as the program itself. Poor documentation will affect your grade even if your program is working well. Start working on the documentation in good time! For example, work out the general structure of your document, e.g., section headings or table of contents, that will show how you intend to organise the documentation, and show this to your supervisor.

Your documentation will be made available to other students for feedback (see Opposition below).
